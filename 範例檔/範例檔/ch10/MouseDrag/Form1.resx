<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="picBlack.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        R0lGODlhLgAuAPcAAOnp6aWlpWxsbEBAQB4eHggICAAAAPb29pycnDw8PAICAvX19YSEhBMTE62trRwc
        HF1dXePj4y4uLgcHBwwMDNvb2x0dHQ8PDxISEhgYGB8fHxoaGhUVFS8vLyMjI2BgYCEhISsrKzAwMDMz
        MzIyMicnJ7CwsDg4ODs7OzU1NSUlJT4+PkREREdHR0FBQT09PSkpKYiIiElJSUhISEVFRfj4+BYWFi0t
        LVFRUVhYWFZWVk1NTaCgoFVVVVxcXF5eXldXV1JSUk5OTmFhYV9fX1NTU0tLSzo6Ou3t7QMDA1paWmVl
        ZWdnZ6urq2hoaGpqamZmZjc3N3Nzc1lZWWtra0JCQkZGRm1tbWJiYlBQUBAQEGlpaQUFBREREWNjY3h4
        eHt7e3FxcUxMTG9vb4WFhYGBgZiYmJGRkXx8fHZ2dnR0dImJiZSUlIKCgq+vr4aGhqamprW1taioqPDw
        8ICAgJWVlaSkpKysrL29vcjIyMDAwI6OjouLi8LCwsrKyo2NjX5+fra2tre3t97e3uvr693d3bu7u/r6
        +qKiorq6utLS0uHh4fHx8efn57OzsyoqKpCQkKenp8XFxdbW1vn5+ff399nZ2SQkJKmpqdra2v39/cHB
        wQEBAXl5eZ6enrGxsczMzNjY2O7u7s7OznJycoyMjN/f3+rq6tPT06Ojo6GhodTU1J2dnUNDQ5+fn7Ky
        speXlzk5OXd3d4eHh5KSkjQ0NHV1dby8vCYmJvv7+/z8/PT09P///wAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ACH5BAEAALwALAAAAAAuAC4AAAj/AHkJHEiwIC8AAQQMIFDAgIECBAYICADAoMWLFw8gSKDAocePHhUk
        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
</value>
  </data>
</root>